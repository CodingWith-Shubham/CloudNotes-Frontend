{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mamga\\\\OneDrive\\\\Desktop\\\\INOTEBOOK\\\\inotebook\\\\src\\\\Context\\\\notes\\\\noteState.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport noteContext from \"./noteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const notesinitial = [];\n  const [notes, setnotes] = useState(notesinitial);\n\n  // Fetch all notes\n  const getnotes = async () => {\n    const response = await fetch(`${host}/api/notes/fetchnotes`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authtoken: localStorage.getItem('token')\n      }\n    });\n    const json = await response.json();\n    setnotes(json);\n  };\n\n  // Add a new note\n  const addnotes = async (title, description) => {\n    const response = await fetch(`${host}/api/notes/addnotes`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authtoken: localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description\n      })\n    });\n    const json = await response.json();\n    setnotes(notes.concat(json));\n  };\n\n  // Delete a note\n  const deletenotes = async id => {\n    const response = await fetch(`${host}/api/notes/deletenotes/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authtoken: localStorage.getItem('token')\n      }\n    });\n    setnotes(prevNotes => prevNotes.filter(note => note._id !== id));\n    console.log(\"Note deleted:\", id);\n  };\n\n  // Update a note\n  const editnotes = async (id, title, description) => {\n    const response = await fetch(`${host}/api/notes/updatenotes/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authtoken: localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description\n      })\n    });\n    const json = await response.json();\n    setnotes(notes.map(note => note._id === id ? {\n      ...note,\n      title: json.title,\n      description: json.description\n    } : note));\n  };\n  return /*#__PURE__*/_jsxDEV(noteContext.Provider, {\n    value: {\n      notes,\n      getnotes,\n      addnotes,\n      deletenotes,\n      editnotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"AoVBfJhv+WZzotSMTTreJsweXo4=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","noteContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","notesinitial","notes","setnotes","getnotes","response","fetch","method","headers","authtoken","localStorage","getItem","json","addnotes","title","description","body","JSON","stringify","concat","deletenotes","id","prevNotes","filter","note","_id","console","log","editnotes","map","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mamga/OneDrive/Desktop/INOTEBOOK/inotebook/src/Context/notes/noteState.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport noteContext from \"./noteContext\";\r\n\r\nconst NoteState = (props) => {\r\n  const host = \"http://localhost:5000\";\r\n  const notesinitial = [];\r\n\r\n  const [notes, setnotes] = useState(notesinitial);\r\n\r\n  // Fetch all notes\r\n  const getnotes = async () => {\r\n    const response = await fetch(`${host}/api/notes/fetchnotes`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authtoken : localStorage.getItem('token'),\r\n      },\r\n    });\r\n    const json = await response.json();\r\n    setnotes(json);\r\n  };\r\n\r\n  // Add a new note\r\n  const addnotes = async (title, description) => {\r\n    const response = await fetch(`${host}/api/notes/addnotes`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authtoken : localStorage.getItem('token'),\r\n      },\r\n      body: JSON.stringify({ title, description }),\r\n    });\r\n    const json = await response.json();\r\n    setnotes(notes.concat(json));\r\n  };\r\n\r\n  // Delete a note\r\n  const deletenotes = async (id) => {\r\n    const response = await fetch(`${host}/api/notes/deletenotes/${id}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authtoken : localStorage.getItem('token'),\r\n      },\r\n  \r\n    });\r\n   \r\n    setnotes((prevNotes) => prevNotes.filter((note) => note._id !== id));\r\n    console.log(\"Note deleted:\", id);\r\n  };\r\n\r\n  // Update a note\r\n  const editnotes = async (id, title, description) => {\r\n    const response = await fetch(`${host}/api/notes/updatenotes/${id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authtoken : localStorage.getItem('token'),\r\n      },\r\n      body: JSON.stringify({ title, description }),\r\n    });\r\n    const json = await response.json();\r\n    setnotes(\r\n      notes.map((note) =>\r\n        note._id === id ? { ...note, title: json.title, description: json.description } : note\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <noteContext.Provider value={{ notes, getnotes, addnotes, deletenotes, editnotes }}>\r\n      {props.children}\r\n    </noteContext.Provider>\r\n  );\r\n};\r\n\r\nexport default NoteState;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}